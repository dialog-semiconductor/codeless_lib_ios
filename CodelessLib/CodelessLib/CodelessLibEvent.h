/*
 **********************************************************************************
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 2020-2024 Renesas Electronics Corporation and/or its affiliates
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Renesas nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY RENESAS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL RENESAS OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 **********************************************************************************
 */

#import <Foundation/Foundation.h>

@class CodelessManager;
@class CodelessCommand;
@class CodelessDeviceInformationCommand;
@class CodelessUartEchoCommand;
@class CodelessBinEscCommand;
@class CodelessAdcReadCommand;
@class CodelessPulseGenerationCommand;
@class CodelessRssiCommand;
@class CodelessIoConfigCommand;
@class CodelessIoStatusCommand;
@class CodelessI2cConfigCommand;
@class CodelessI2cScanCommand;
@class I2cDevice;
@class CodelessI2cReadCommand;
@class CodelessMemStoreCommand;
@class CodelessPinCodeCommand;
@class CodelessGPIO;
@class CodelessCmdGetCommand;
@class CodelessAdvertisingDataCommand;
@class CodelessAdvertisingResponseCommand;
@class CodelessRandomNumberCommand;
@class CodelessBatteryLevelCommand;
@class CodelessBaudRateCommand;
@class CodelessBluetoothAddressCommand;
@class CodelessBondingEntryStatusCommand;
@class CodelessBondingEntryTransferCommand;
@class CodelessBondingEntry;
@class CodelessGapScanCommand;
@class CodelessGapStatusCommand;
@class CodelessGapScannedDevice;
@class CodelessGapConnectCommand;
@class CodelessGapDisconnectCommand;
@class CodelessConnectionParametersCommand;
@class CodelessMaxMtuCommand;
@class CodelessFlowControlCommand;
@class CodelessHostSleepCommand;
@class CodelessSpiConfigCommand;
@class CodelessSpiReadCommand;
@class CodelessSpiTransferCommand;
@class CodelessDataLengthEnableCommand;
@class CodelessEventConfigCommand;
@class CodelessBondingEntryClearCommand;
@class CodelessEventConfig;
@class CodelessBasicCommand;
@class CodelessUartPrintCommand;
@class CodelessEventHandlerCommand;
@class CodelessEventHandler;
@class CodelessSecurityModeCommand;
@class CodelessHeartbeatCommand;
@class CodelessPowerLevelConfigCommand;
@class CodelessBluetoothManager;
@class CBPeripheral;
@class CodelessAdvData;
@class CBUUID;
@class CodelessLine;
@class CodelessScript;
@class DspsFileSend;
@class DspsFileReceive;
@class DspsPeriodicSend;

NS_ASSUME_NONNULL_BEGIN


/**
 * Contains event classes for all possible events that can be generated by the CodeLess library.
 *
 * Events are generated as a result of BLE operations (for example, connection/disconnection),
 * CodeLess operations, AT commands results, or DSPS operations. Each event object contains
 * information about the relevant event.
 *
 * ## Usage ##
 * Events are sent using the NSNotificationCenter API. Each event is sent as a NSNotification.
 * The notification name is set to the event name, the notification object is set to the source
 * of the event, and the notification user info dictionary contains an event specific object
 * with more information about the event (using "event" as the key).
 *
 * Subscribe to the required events from your app code.
 * <blockquote><pre>
 * ...
 *     [NSNotificationCenter.defaultCenter addObserver:self selector:@@selector(onPrint:) name:CodelessLibEvent.Print object:self.manager];
 * ...
 *
 * - (void) onPrint:(NSNotification*)notification {
 *     {@link CodelessPrintEvent}* event = notification.userInfo[@@"event"];
 *     [self showMessage:event.text duration:MESSAGE_DURATION];
 * }</pre></blockquote>
 * @see CodelessManager
 * @see CodelessBluetoothManager
 * @see <a href="https://lpccs-docs.renesas.com/UM-140-DA145x-CodeLess/index.html">AT commands documentation</a>
 */
@interface CodelessLibEvent : NSObject

/// Event generated when Bluetooth adapter (CBCentralManager) state changes.
/// @see CodelessBluetoothStateEvent
@property (class, readonly) NSString* BluetoothState;

/// Event generated when scanning has started.
/// @see CodelessScanStartEvent
@property (class, readonly) NSString* ScanStart;

/// Event generated when scanning has stopped.
/// @see CodelessScanStopEvent
@property (class, readonly) NSString* ScanStop;

/// Event generated when a device is found during scanning.
/// @see CodelessScanResultEvent
@property (class, readonly) NSString* ScanResult;

/// Event generated when the connection to the peer device fails.
/// @see CodelessConnectionFailedEvent
@property (class, readonly) NSString* ConnectionFailed;

/// Event generated when the peer device is connected.
/// @see CodelessDeviceConnectedEvent
@property (class, readonly) NSString* DeviceConnected;

/// Event generated when the peer device is disconnected.
/// @see CodelessDeviceDisconnectedEvent
@property (class, readonly) NSString* DeviceDisconnected;

/// Event generated when the connection state of the device changes.
/// @see CodelessConnectionEvent
@property (class, readonly) NSString* Connection;

/// Event generated when the service discovery process is started or is complete.
/// @see CodelessServiceDiscoveryEvent
@property (class, readonly) NSString* ServiceDiscovery;

/// Event generated when the connected device is ready for Codeless/DSPS operations.
/// @see CodelessReadyEvent
@property (class, readonly) NSString* Ready;

/// Event generated when an error occurs during manager operation.
/// @see CodelessErrorEvent
@property (class, readonly) NSString* Error;

/// Event generated when one of the Device information characteristics is read.
/// @see CodelessDeviceInfoEvent
@property (class, readonly) NSString* DeviceInfo;

/// Event generated when the connection RSSI is read.
/// @see CodelessRssiEvent
@property (class, readonly) NSString* Rssi;

/// Event generated when the peer CodeLess device sends the <code>AT+BINREQ</code> command.
/// @see CodelessBinaryModeRequestEvent
@property (class, readonly) NSString* BinaryModeRequest;

/// Event generated when the operation mode changes between command (CodeLess) and binary (DSPS).
/// @see CodelessModeEvent
@property (class, readonly) NSString* Mode;

/// Event generated when a CodeLess communication line is processed.
/// @see CodelessLineEvent
@property (class, readonly) NSString* Line;

/// Event generated when a CodeLess {@link CodelessScript script} has started.
/// @see CodelessScriptStartEvent
@property (class, readonly) NSString* ScriptStart;

/// Event generated when a CodeLess {@link CodelessScript script} is complete.
/// @see CodelessScriptEndEvent
@property (class, readonly) NSString* ScriptEnd;

/// Event generated when a command that is part of a running CodeLess {@link CodelessScript script} is complete.
/// @see CodelessScriptCommandEvent
@property (class, readonly) NSString* ScriptCommand;

/// Event generated when the sent AT command completes successfully.
/// @see CodelessCommandSuccessEvent
@property (class, readonly) NSString* CommandSuccess;

/// Event generated when the sent AT command fails.
/// @see CodelessCommandErrorEvent
@property (class, readonly) NSString* CommandError;

/// Event generated after <code>AT+</code> command completes successfully.
/// @see CodelessPingEvent
@property (class, readonly) NSString* Ping;

/// Event generated after <code>AT+E</code> command completes successfully.
/// @see CodelessUartEchoEvent
@property (class, readonly) NSString* UartEcho;

/// Event generated after <code>AT+BINESC</code> command completes successfully.
/// @see CodelessBinEscEvent
@property (class, readonly) NSString* BinEsc;

/// Event generated after <code>AT+ADC</code> command completes successfully.
/// @see CodelessAnalogReadEvent
@property (class, readonly) NSString* AnalogRead;

/// Event generated after <code>AT+PWM</code> command without parameters completes successfully.
/// @see CodelessPwmStatusEvent
@property (class, readonly) NSString* PwmStatus;

/// Event generated after <code>AT+PWM</code> command with parameters completes successfully.
/// @see CodelessPwmStartEvent
@property (class, readonly) NSString* PwmStart;

/// Event generated after <code>AT+RSSI</code> command completes successfully.
/// @see CodelessPeerRssiEvent
@property (class, readonly) NSString* PeerRssi;

/// Event generated after <code>AT+IOCFG</code> command without parameters completes successfully.
/// @see CodelessIoConfigEvent
@property (class, readonly) NSString* IoConfig;

/// Event generated after <code>AT+IOCFG</code> command with parameters completes successfully.
/// @see CodelessIoConfigSetEvent
@property (class, readonly) NSString* IoConfigSet;

/// Event generated after <code>AT+IO</code> command completes successfully.
/// @see CodelessIoStatusEvent
@property (class, readonly) NSString* IoStatus;

/// Event generated after <code>AT+I2CCFG</code> command completes successfully.
/// @see CodelessI2cConfigEvent
@property (class, readonly) NSString* I2cConfig;

/// Event generated after <code>AT+I2CSCAN</code> command completes successfully.
/// @see CodelessI2cScanEvent
@property (class, readonly) NSString* I2cScan;

/// Event generated after <code>AT+I2CREAD</code> command completes successfully.
/// @see CodelessI2cReadEvent
@property (class, readonly) NSString* I2cRead;

/// Event generated after <code>AT+MEM</code> command completes successfully.
/// @see CodelessMemoryTextContentEvent
@property (class, readonly) NSString* MemoryTextContent;

/// Event generated after <code>AT+PIN</code> command completes successfully.
/// @see CodelessPinCodeEvent
@property (class, readonly) NSString* PinCode;

/// Event generated after <code>AT+CMD</code> command completes successfully.
/// @see CodelessStoredCommandsEvent
@property (class, readonly) NSString* StoredCommands;

/// Event generated after <code>AT+ADVDATA</code> command completes successfully.
/// @see CodelessAdvertisingDataEvent
@property (class, readonly) NSString* AdvertisingData;

/// Event generated after <code>AT+ADVRESP</code> command completes successfully.
/// @see CodelessScanResponseDataEvent
@property (class, readonly) NSString* ScanResponseData;

/// Event generated after <code>AT+RANDOM</code> command completes successfully.
/// @see CodelessRandomNumberEvent
@property (class, readonly) NSString* RandomNumber;

/// Event generated after <code>AT+BATT</code> command completes successfully.
/// @see CodelessBatteryLevelEvent
@property (class, readonly) NSString* BatteryLevel;

/// Event generated after <code>AT+BAUD</code> command completes successfully.
/// @see CodelessBaudRateEvent
@property (class, readonly) NSString* BaudRate;

/// Event generated after <code>AT+BDADDR</code> command completes successfully.
/// @see CodelessBluetoothAddressEvent
@property (class, readonly) NSString* BluetoothAddress;

/// Event generated after <code>AT+CHGBNDP</code> command with parameters completes successfully.
/// @see CodelessBondingEntryPersistenceStatusSetEvent
@property (class, readonly) NSString* BondingEntryPersistenceStatusSet;

/// Event generated after <code>AT+CHGBNDP</code> command without parameters completes successfully.
/// @see CodelessBondingEntryPersistenceTableStatusEvent
@property (class, readonly) NSString* BondingEntryPersistenceTableStatus;

/// Event generated after <code>AT+IEBNDE</code> command completes successfully.
/// @see CodelessBondingEntryEvent
@property (class, readonly) NSString* BondingEntry;

/// Event generated after <code>AT+GAPSTATUS</code> command completes successfully.
/// @see CodelessGapStatusEvent
@property (class, readonly) NSString* GapStatus;

/// Event generated after <code>AT+GAPSCAN</code> command completes successfully.
/// @see CodelessGapScanResultEvent
@property (class, readonly) NSString* GapScanResult;

/// Event generated after <code>AT+GAPCONNECT</code> command completes successfully.
/// @see CodelessGapDeviceConnectedEvent
@property (class, readonly) NSString* GapDeviceConnected;

/// Event generated after <code>AT+GAPDISCONNECT</code> command completes successfully.
/// @see CodelessGapDeviceDisconnectedEvent
@property (class, readonly) NSString* GapDeviceDisconnected;

/// Event generated after <code>AT+CONPAR</code> command completes successfully.
/// @see CodelessConnectionParametersEvent
@property (class, readonly) NSString* ConnectionParameters;

/// Event generated after <code>AT+MAXMTU</code> command completes successfully.
/// @see CodelessMaxMtuEvent
@property (class, readonly) NSString* MaxMtu;

/// Event generated after <code>AT+FLOWCONTROL</code> command completes successfully.
/// @see CodelessFlowControlEvent
@property (class, readonly) NSString* FlowControl;

/// Event generated after <code>AT+HOSTSLP</code> command completes successfully.
/// @see CodelessHostSleepEvent
@property (class, readonly) NSString* HostSleep;

/// Event generated after <code>AT+SPICFG</code> command completes successfully.
/// @see CodelessSpiConfigEvent
@property (class, readonly) NSString* SpiConfig;

/// Event generated after <code>AT+SPIRD</code> command completes successfully.
/// @see CodelessSpiReadEvent
@property (class, readonly) NSString* SpiRead;

/// Event generated after <code>AT+SPITR</code> command completes successfully.
/// @see CodelessSpiTransferEvent
@property (class, readonly) NSString* SpiTransfer;

/// Event generated after <code>AT+DLEEN</code> command completes successfully.
/// @see CodelessDataLengthEnableEvent
@property (class, readonly) NSString* DataLengthEnable;

/// Event generated after <code>AT+I</code> command completes successfully.
/// @see CodelessDeviceInformationEvent
@property (class, readonly) NSString* DeviceInformation;

/// Event generated after <code>AT+EVENT</code> command with parameters completes successfully.
/// @see CodelessEventStatusEvent
@property (class, readonly) NSString* EventStatus;

/// Event generated after <code>AT+EVENT</code> command without parameters completes successfully.
/// @see CodelessEventStatusTableEvent
@property (class, readonly) NSString* EventStatusTable;

/// Event generated after <code>AT+CLRBNDE</code> command completes successfully.
/// @see CodelessBondingEntryClearEvent
@property (class, readonly) NSString* BondingEntryClear;

/// Event generated when a {@link CodelessLibConfig#supportedCommands supported} incoming CodeLess command is received from the peer device.
/// @see CodelessInboundCommandEvent
@property (class, readonly) NSString* InboundCommand;

/// Event generated when an incoming CodeLess command, that is configured to be processed by the app, is received from the peer device.
/// @see CodelessHostCommandEvent
@property (class, readonly) NSString* HostCommand;

/// Event generated when an incoming <code>AT+PRINT</code> command is received from the peer device.
/// @see CodelessPrintEvent
@property (class, readonly) NSString* Print;

/// Event generated after <code>AT+HNDL</code> command with parameters completes successfully.
/// @see CodelessEventCommandsEvent
@property (class, readonly) NSString* EventCommands;

/// Event generated after <code>AT+HNDL</code> command without parameters completes successfully.
/// @see CodelessEventCommandsTableEvent
@property (class, readonly) NSString* EventCommandsTable;

/// Event generated after <code>AT+SEC</code> command completes successfully.
/// @see CodelessSecurityModeEvent
@property (class, readonly) NSString* SecurityMode;

/// Event generated after <code>AT+HRTBT</code> command completes successfully.
/// @see CodelessHeartbeatEvent
@property (class, readonly) NSString* Heartbeat;

/// Event generated after <code>AT+PWRLVL</code> command completes successfully.
/// @see CodelessPowerLevelEvent
@property (class, readonly) NSString* PowerLevel;

/// Event generated when binary data are received from the peer DSPS device.
/// @see DspsRxDataEvent
@property (class, readonly) NSString* DspsRxData;

/// Event generated when a DSPS RX flow control message is sent to the peer device.
/// @see DspsRxFlowControlEvent
@property (class, readonly) NSString* DspsRxFlowControl;

/// Event generated when a DSPS TX flow control message is received from the peer device.
/// @see DspsTxFlowControlEvent
@property (class, readonly) NSString* DspsTxFlowControl;

/// Event generated when a file chunk is sent to the peer DSPS device, as part of a file send operation.
/// @see DspsFileChunkEvent
@property (class, readonly) NSString* DspsFileChunk;

/// Event generated when the selected file for a DSPS file send operation cannot be loaded.
/// @see DspsFileErrorEvent
@property (class, readonly) NSString* DspsFileError;

/// Event generated when a file chunk is received from the peer DSPS device, as part of a file receive operation.
/// @see DspsRxFileDataEvent
@property (class, readonly) NSString* DspsRxFileData;

/// Event generated when a DSPS file receive operation with CRC is complete.
/// @see DspsRxFileCrcEvent
@property (class, readonly) NSString* DspsRxFileCrc;

/// Event generated when a chunk is sent to the peer DSPS device, as part of a pattern send operation.
/// @see DspsPatternChunkEvent
@property (class, readonly) NSString* DspsPatternChunk;

/// Event generated when the selected file for a DSPS pattern send operation cannot be loaded.
/// @see DspsPatternFileErrorEvent
@property (class, readonly) NSString* DspsPatternFileError;

/// Event generated when DSPS statistics are calculated.
/// @see DspsStatsEvent
@property (class, readonly) NSString* DspsStats;

@end


/// Base class for {@link CodelessBluetoothManager Bluetooth manager} events.
@interface CodelessBluetoothEvent : NSObject
/// The {@link CodelessBluetoothManager Bluetooth manager} that generated the event.
@property (weak) CodelessBluetoothManager* manager;
- (instancetype) initWithManager:(CodelessBluetoothManager*)manager;
@end


/// Event generated when Bluetooth adapter (CBCentralManager) state changes.
/// @see CodelessLibEvent#BluetoothState
@interface CodelessBluetoothStateEvent : CodelessBluetoothEvent
/// The Bluetooth adapter (CBCentralManager) state.
@property NSNumber* state;
@end


/// Event generated when scanning has started.
/// @see CodelessLibEvent#ScanStart
@interface CodelessScanStartEvent : CodelessBluetoothEvent
@end


/// Event generated when scanning has stopped.
/// @see CodelessLibEvent#ScanStop
@interface CodelessScanStopEvent : CodelessBluetoothEvent
@end


/// Event generated when a device is found during scanning.
/// @see CodelessLibEvent#ScanResult
@interface CodelessScanResultEvent : CodelessBluetoothEvent
/// The found device.
@property CBPeripheral* device;
/// Parsed advertising data from the advertising event.
@property CodelessAdvData* advData;
/// The RSSI of the received advertising event.
@property NSNumber* rssi;
- (instancetype) initWithManager:(CodelessBluetoothManager*)manager device:(CBPeripheral*)device advData:(CodelessAdvData*)advData rssi:(NSNumber*)rssi;
@end


/// Event generated when the connection to the peer device fails.
/// @see CodelessLibEvent#ConnectionFailed
@interface CodelessConnectionFailedEvent : CodelessBluetoothEvent
/// The peer device.
@property CBPeripheral* device;
/// The cause of the connection failure.
@property NSError* error;
- (instancetype) initWithManager:(CodelessBluetoothManager*)manager device:(CBPeripheral*)device error:(NSError*)error;
@end


/// Event generated when the peer device is connected.
/// @see CodelessLibEvent#DeviceConnected
@interface CodelessDeviceConnectedEvent : CodelessBluetoothEvent
/// The device that was connected.
@property CBPeripheral* device;
- (instancetype) initWithManager:(CodelessBluetoothManager*)manager device:(CBPeripheral*)device;
@end


/// Event generated when the peer device is disconnected.
/// @see CodelessLibEvent#DeviceDisconnected
@interface CodelessDeviceDisconnectedEvent : CodelessBluetoothEvent
/// The device that was disconnected.
@property CBPeripheral* device;
/// The cause of the disconnection (if the disconnection is caused by an error).
@property NSError* error;
- (instancetype) initWithManager:(CodelessBluetoothManager*)manager device:(CBPeripheral*)device error:(NSError*)error;
@end


/// Base class for {@link CodelessManager manager} events.
@interface CodelessEvent : NSObject
/// The {@link CodelessManager manager} that generated the event.
@property (weak) CodelessManager* manager;
- (instancetype) initWithManager:(CodelessManager*)manager;
@end


/**
 * Event generated when the connection state of the device changes.
 *
 * The possible states are: disconnected, connecting, connected.
 * Use {@link CodelessManager#state manager.state} to get the current state.
 * @see CodelessLibEvent#Connection
 */
@interface CodelessConnectionEvent : CodelessEvent
@end


/// Event generated when the service discovery process is started or is complete.
/// @see CodelessLibEvent#ServiceDiscovery
@interface CodelessServiceDiscoveryEvent : CodelessEvent
/// <code>false</code> when service discovery is started, <code>true</code> if complete.
@property BOOL complete;
- (instancetype) initWithManager:(CodelessManager*)manager complete:(BOOL)complete;
@end


/**
 * Event generated when the connected device is ready for Codeless/DSPS operations.
 * <p> The device becomes ready after the service discovery is complete and the required notifications are enabled.
 * @see CodelessLibEvent#Ready
 */
@interface CodelessReadyEvent : CodelessEvent
@end


/// Event generated when an error occurs during manager operation.
/// @see CodelessLibEvent#Error
@interface CodelessErrorEvent : CodelessEvent
/// The error {@link CODELESS_ERROR code}.
@property int error;
- (instancetype) initWithManager:(CodelessManager*)manager error:(int)error;

enum CODELESS_ERROR {
    /// The operation cannot be executed, because the device is not ready.
    CODELESS_ERROR_NOT_READY = 0,
    /// CodeLess/DSPS service initialization failed.
    CODELESS_ERROR_INIT_SERVICES = 1,
    /// A GATT operation failed.
    CODELESS_ERROR_GATT_OPERATION = 2,
    /// The operation is not allowed in the current operation mode.
    CODELESS_ERROR_OPERATION_NOT_ALLOWED = 3,
    /// The command prefix is invalid.
    CODELESS_ERROR_INVALID_PREFIX = 4,
    /// The command is invalid (for example, missing or invalid arguments).
    CODELESS_ERROR_INVALID_COMMAND = 5,
};

@end


/// Event generated when one of the Device information characteristics is read.
/// @see CodelessLibEvent#DeviceInfo
@interface CodelessDeviceInfoEvent : CodelessEvent
/// The UUID of the Device information characteristic.
@property CBUUID* uuid;
/// The value of the Device information characteristic.
@property NSData* value;
/// The value of the Device information characteristic as string (where applicable).
@property NSString* info;
- (instancetype) initWithManager:(CodelessManager*)manager uuid:(CBUUID*)uuid value:(NSData*)value info:(NSString*)info;
@end


/**
 * Event generated when the connection RSSI is read.
 * <p> Sent after {@link CodelessManager#getRssi} is called.
 * @see CodelessLibEvent#Rssi
 */
@interface CodelessRssiEvent : CodelessEvent
/// The RSSI value of the connection.
@property NSNumber* rssi;
- (instancetype) initWithManager:(CodelessManager*)manager rssi:(NSNumber*)rssi;
@end


/**
 * Event generated when the peer CodeLess device sends the <code>AT+BINREQ</code> command.
 *
 * The app should call {@link CodelessManager#acceptBinaryModeRequest}, if the request is accepted.
 *
 * NOTE: This event is sent only if {@link CodelessLibConfig#HOST_BINARY_REQUEST} is enabled.
 * Otherwise the library will automatically respond with <code>AT+BINREQACK</code>, entering
 * binary mode.
 * @see CodelessLibEvent#BinaryModeRequest
 */
@interface CodelessBinaryModeRequestEvent : CodelessEvent
@end


/// Event generated when the operation mode changes between command (CodeLess) and binary (DSPS).
/// @see CodelessLibEvent#Mode
@interface CodelessModeEvent : CodelessEvent
/// <code>true</code> if entering command mode, <code>false</code> if entering binary mode.
@property BOOL command;
- (instancetype) initWithManager:(CodelessManager*)manager command:(BOOL)command;
@end


/**
 * Event generated when a CodeLess communication line is processed.
 * <p> This event is sent only if {@link CodelessLibConfig#LINE_EVENTS} is enabled.
 * @see CodelessLibEvent#Line
 */
@interface CodelessLineEvent : CodelessEvent
/// The CodeLess communication line.
@property CodelessLine* line;
- (instancetype) initWithManager:(CodelessManager*)manager line:(CodelessLine*)line;
@end


/// Event generated when a CodeLess {@link CodelessScript script} has started.
/// @see CodelessLibEvent#ScriptStart
@interface CodelessScriptStartEvent : CodelessEvent
/// The script that has started.
@property CodelessScript* script;
- (instancetype) initWithScript:(CodelessScript*)script;
@end


/// Event generated when a CodeLess {@link CodelessScript script} is complete.
/// @see CodelessLibEvent#ScriptEnd
@interface CodelessScriptEndEvent : CodelessEvent
/// The script that is complete.
@property CodelessScript* script;
/// <code>true</code> if an error occurred in one of the script commands, <code>false</code> otherwise.
@property BOOL error;
- (instancetype) initWithScript:(CodelessScript*)script error:(BOOL)error;
@end


/// Event generated when a command that is part of a running CodeLess {@link CodelessScript script} is complete.
/// @see CodelessLibEvent#ScriptCommand
@interface CodelessScriptCommandEvent : CodelessEvent
/// The script that is running.
@property CodelessScript* script;
/// The script command that is complete.
@property CodelessCommand* command;
- (instancetype) initWithScript:(CodelessScript*)script command:(CodelessCommand*)command;
@end


/// Base class for CodeLess AT command events.
@interface CodelessCommandEvent : CodelessEvent
/// The AT command that generated the event.
@property CodelessCommand* command;
- (instancetype) initWithCodelessCommand:(CodelessCommand*)command;
@end


/// Event generated when the sent AT command completes successfully.
/// @see CodelessLibEvent#CommandSuccess
@interface CodelessCommandSuccessEvent : CodelessCommandEvent
- (instancetype) initWithCommand:(CodelessCommand*)command;
@end


/// Event generated when the sent AT command fails.
/// @see CodelessLibEvent#CommandError
@interface CodelessCommandErrorEvent : CodelessCommandEvent
/// The error message describing the failure.
@property NSString* msg;
- (instancetype) initWithCommand:(CodelessCommand*)command msg:(NSString*)msg;
@end


/// Event generated after <code>AT+</code> command completes successfully.
/// @see CodelessLibEvent#Ping
@interface CodelessPingEvent : CodelessCommandEvent
- (instancetype) initWithCommand:(CodelessBasicCommand*)command;
@end


/// Event generated after <code>AT+I</code> command completes successfully.
/// @see CodelessLibEvent#DeviceInformation
@interface CodelessDeviceInformationEvent : CodelessCommandEvent
/// The received device information text.
@property NSString* info;
- (instancetype) initWithCommand:(CodelessDeviceInformationCommand*)command;
@end


/// Event generated after <code>AT+E</code> command completes successfully.
/// @see CodelessLibEvent#UartEcho
@interface CodelessUartEchoEvent : CodelessCommandEvent
/// <code>true</code> if UART echo is on, <code>false</code> if it is off.
@property BOOL echo;
- (instancetype) initWithCommand:(CodelessUartEchoCommand*)command;
@end


/// Event generated after <code>AT+BINESC</code> command completes successfully.
/// @see CodelessLibEvent#BinEsc
@interface CodelessBinEscEvent : CodelessCommandEvent
/// The 3-byte escape sequence as a 24-bit value.
@property int sequence;
/// The idle time before the escape sequence (ms).
@property int timePrior;
/// The idle time after the escape sequence (ms).
@property int timeAfter;
- (instancetype) initWithCommand:(CodelessBinEscCommand*)command;
@end


/// Event generated after <code>AT+ADC</code> command completes successfully.
/// @see CodelessLibEvent#AnalogRead
@interface CodelessAnalogReadEvent : CodelessCommandEvent
/// The selected analog input pin.
@property CodelessGPIO* gpio;
/// The analog pin state.
@property int state;
- (instancetype) initWithCommand:(CodelessAdcReadCommand*)command;
@end


/// Event generated after <code>AT+PWM</code> command without parameters completes successfully.
/// @see CodelessLibEvent#PwmStatus
@interface CodelessPwmStatusEvent : CodelessCommandEvent
/// The frequency of the pulse in Hz.
@property int frequency;
/// The duty cycle of the pulse.
@property int dutyCycle;
/// The duration of the pulse in ms.
@property int duration;
- (instancetype) initWithCommand:(CodelessPulseGenerationCommand*)command;
@end


/// Event generated after <code>AT+PWM</code> command with parameters completes successfully.
/// @see CodelessLibEvent#PwmStart
@interface CodelessPwmStartEvent : CodelessCommandEvent
/// The frequency of the pulse in Hz.
@property int frequency;
/// The duty cycle of the pulse.
@property int dutyCycle;
/// The duration of the pulse in ms.
@property int duration;
- (instancetype) initWithCommand:(CodelessPulseGenerationCommand*)command;
@end


/// Event generated after <code>AT+IOCFG</code> command without parameters completes successfully.
/// @see CodelessLibEvent#IoConfig
@interface CodelessIoConfigEvent : CodelessCommandEvent
/// The current IO pin configuration.
@property NSArray<CodelessGPIO*>* configuration;
- (instancetype) initWithCommand:(CodelessIoConfigCommand*)command;
@end


/// Event generated after <code>AT+IOCFG</code> command with parameters completes successfully.
/// @see CodelessLibEvent#IoConfigSet
@interface CodelessIoConfigSetEvent : CodelessCommandEvent
/// The IO pin that was configured.
@property CodelessGPIO* gpio;
- (instancetype) initWithCommand:(CodelessIoConfigCommand*)command;
@end


/// Event generated after <code>AT+IO</code> command completes successfully.
/// @see CodelessLibEvent#IoStatus
@interface CodelessIoStatusEvent : CodelessCommandEvent
/// The selected IO pin.
@property CodelessGPIO* gpio;
/// <code>true</code> if status is high, <code>false</code> if it is low.
@property BOOL status;
- (instancetype) initWithCommand:(CodelessIoStatusCommand*)command;
@end


/// Event generated after <code>AT+I2CCFG</code> command completes successfully.
/// @see CodelessLibEvent#I2cConfig
@interface CodelessI2cConfigEvent : CodelessCommandEvent
/// The I2C address bit-count.
@property int addressSize;
/// The I2C bus bitrate in KHz.
@property int bitrate;
/// The I2C register bit-count.
@property int registerSize;
- (instancetype) initWithCommand:(CodelessI2cConfigCommand*)command;
@end


/// Event generated after <code>AT+I2CSCAN</code> command completes successfully.
/// @see CodelessLibEvent#I2cScan
@interface CodelessI2cScanEvent : CodelessCommandEvent
/// The list of the {@link I2cDevice devices} found on the I2C bus.
@property NSArray<I2cDevice*>* devices;
- (instancetype) initWithCommand:(CodelessI2cScanCommand*)command;
@end


/// Event generated after <code>AT+I2CREAD</code> command completes successfully.
/// @see CodelessLibEvent#I2cRead
@interface CodelessI2cReadEvent : CodelessCommandEvent
/// The read data byte array.
@property NSArray<NSNumber*>* data;
- (instancetype) initWithCommand:(CodelessI2cReadCommand*)command;
@end


/// Event generated after <code>AT+MEM</code> command completes successfully.
/// @see CodelessLibEvent#MemoryTextContent
@interface CodelessMemoryTextContentEvent : CodelessCommandEvent
/// The memory slot index (0-3).
@property int index;
/// The stored text.
@property NSString* text;
- (instancetype) initWithCommand:(CodelessMemStoreCommand*)command;
@end


/// Event generated after <code>AT+PIN</code> command completes successfully.
/// @see CodelessLibEvent#PinCode
@interface CodelessPinCodeEvent : CodelessCommandEvent
/// The pin code.
@property int pinCode;
- (instancetype) initWithCommand:(CodelessPinCodeCommand*)command;
@end


/// Event generated after <code>AT+CMD</code> command completes successfully.
/// @see CodelessLibEvent#StoredCommands
@interface CodelessStoredCommandsEvent : CodelessCommandEvent
/// The command slot index (0-3).
@property int index;
/// The stored commands.
@property NSArray<CodelessCommand*>* commands;
- (instancetype) initWithCommand:(CodelessCmdGetCommand*)command;
@end


/// Event generated after <code>AT+ADVDATA</code> command completes successfully.
/// @see CodelessLibEvent#AdvertisingData
@interface CodelessAdvertisingDataEvent : CodelessCommandEvent
/// The advertising data byte array.
@property NSData* data;
- (instancetype) initWithCommand:(CodelessAdvertisingDataCommand*)command;
@end


/// Event generated after <code>AT+ADVRESP</code> command completes successfully.
/// @see CodelessLibEvent#ScanResponseData
@interface CodelessScanResponseDataEvent : CodelessCommandEvent
/// The scan response data byte array.
@property NSData* data;
- (instancetype) initWithCommand:(CodelessAdvertisingResponseCommand*)command;
@end


/// Event generated after <code>AT+RANDOM</code> command completes successfully.
/// @see CodelessLibEvent#RandomNumber
@interface CodelessRandomNumberEvent : CodelessCommandEvent
/// The random number (unsigned 32-bit).
@property uint32_t number;
- (instancetype) initWithCommand:(CodelessRandomNumberCommand*)command;
@end


/// Event generated after <code>AT+BATT</code> command completes successfully.
/// @see CodelessLibEvent#BatteryLevel
@interface CodelessBatteryLevelEvent : CodelessCommandEvent
/// The battery level (percentage).
@property int level;
- (instancetype) initWithCommand:(CodelessBatteryLevelCommand*)command;
@end


/// Event generated after <code>AT+BAUD</code> command completes successfully.
/// @see CodelessLibEvent#BaudRate
@interface CodelessBaudRateEvent : CodelessCommandEvent
/// The UART baud rate.
@property int baudRate;
- (instancetype) initWithCommand:(CodelessBaudRateCommand*)command;
@end


/// Event generated after <code>AT+BDADDR</code> command completes successfully.
/// @see CodelessLibEvent#BluetoothAddress
@interface CodelessBluetoothAddressEvent : CodelessCommandEvent
/// The peer device Bluetooth address.
@property NSString* address;
/// <code>true</code> if the Bluetooth address is random, <code>false</code> if it is public.
@property BOOL random;
- (instancetype) initWithCommand:(CodelessBluetoothAddressCommand*)command;
@end


/// Event generated after <code>AT+RSSI</code> command completes successfully.
/// @see CodelessLibEvent#PeerRssi
@interface CodelessPeerRssiEvent : CodelessCommandEvent
/// The connection RSSI measured by the peer device.
@property int rssi;
- (instancetype) initWithCommand:(CodelessRssiCommand*)command;
@end


/// Event generated after <code>AT+CHGBNDP</code> command with parameters completes successfully.
/// @see CodelessLibEvent#BondingEntryPersistenceStatusSet
@interface CodelessBondingEntryPersistenceStatusSetEvent : CodelessCommandEvent
/// The bonding entry (1-5, 0xFF: all entries).
@property int index;
/// <code>true</code> if persistence is enabled, <code>false</code> if it is disabled.
@property BOOL persistent;
- (instancetype) initWithCommand:(CodelessBondingEntryStatusCommand*)command;
@end


/// Event generated after <code>AT+CHGBNDP</code> command without parameters completes successfully.
/// @see CodelessLibEvent#BondingEntryPersistenceTableStatus
@interface CodelessBondingEntryPersistenceTableStatusEvent : CodelessCommandEvent
/// One value per bonding entry: <code>true</code> if persistence is enabled, <code>false</code> if it is disabled, <code>NSNull</code> if entry is unused.
@property NSArray<NSObject*>* persistenceStatusTable;
- (instancetype) initWithCommand:(CodelessBondingEntryStatusCommand*)command;
@end


/// Event generated after <code>AT+IEBNDE</code> command completes successfully.
/// @see CodelessLibEvent#BondingEntry
@interface CodelessBondingEntryEvent : CodelessCommandEvent
/// The bonding entry (1-5).
@property int index;
/// The bonding entry {@link CodelessBondingEntry configuration}.
@property CodelessBondingEntry* entry;
- (instancetype) initWithCommand:(CodelessBondingEntryTransferCommand*)command;
@end


/// Event generated after <code>AT+GAPSTATUS</code> command completes successfully.
/// @see CodelessLibEvent#GapStatus
@interface CodelessGapStatusEvent : CodelessCommandEvent
/// The GAP role (0: peripheral, 1: central).
@property int gapRole;
/// <code>true</code> if connected, <code>false</code> if disconnected.
@property BOOL connected;
- (instancetype) initWithCommand:(CodelessGapStatusCommand*)command;
@end


/// Event generated after <code>AT+GAPSCAN</code> command completes successfully.
/// @see CodelessLibEvent#GapScanResult
@interface CodelessGapScanResultEvent : CodelessCommandEvent
/// The {@link CodelessGapScannedDevice devices} that were found during the scan.
@property NSArray<CodelessGapScannedDevice*>* devices;
- (instancetype) initWithCommand:(CodelessGapScanCommand*)command;
@end


/// Event generated after <code>AT+GAPCONNECT</code> command completes successfully.
/// @see CodelessLibEvent#GapDeviceConnected
@interface CodelessGapDeviceConnectedEvent : CodelessCommandEvent
/// The Bluetooth address of the connected device.
@property NSString* deviceAddress;
- (instancetype) initWithCommand:(CodelessGapConnectCommand*)command;
@end


/// Event generated after <code>AT+GAPDISCONNECT</code> command completes successfully.
/// @see CodelessLibEvent#GapDeviceDisconnected
@interface CodelessGapDeviceDisconnectedEvent : CodelessCommandEvent
- (instancetype) initWithCommand:(CodelessGapDisconnectCommand*)command;
@end


/// Event generated after <code>AT+CONPAR</code> command completes successfully.
/// @see CodelessLibEvent#ConnectionParameters
@interface CodelessConnectionParametersEvent : CodelessCommandEvent
/// The connection interval in multiples of 1.25 ms.
@property int interval;
/// The slave latency.
@property int latency;
/// The supervision timeout in multiples of 10 ms.
@property int timeout;
/// Specifies how the connection parameters are applied.
@property int action;
- (instancetype) initWithCommand:(CodelessConnectionParametersCommand*)command;
@end


/// Event generated after <code>AT+MAXMTU</code> command completes successfully.
/// @see CodelessLibEvent#MaxMtu
@interface CodelessMaxMtuEvent : CodelessCommandEvent
/// The maximum MTU value.
@property int mtu;
- (instancetype) initWithCommand:(CodelessMaxMtuCommand*)command;
@end


/// Event generated after <code>AT+FLOWCONTROL</code> command completes successfully.
/// @see CodelessLibEvent#FlowControl
@interface CodelessFlowControlEvent : CodelessCommandEvent
/// <code>true</code> if UART RTS/CTS flow control is enabled, <code>false</code> if it is disabled.
@property BOOL enabled;
/// {@link CodelessGPIO GPIO} pin for the RTS signal.
@property CodelessGPIO* rtsGpio;
/// {@link CodelessGPIO GPIO} pin for the CTS signal.
@property CodelessGPIO* ctsGpio;
- (instancetype) initWithCommand:(CodelessFlowControlCommand*)command;
@end


/// Event generated after <code>AT+HOSTSLP</code> command completes successfully.
/// @see CodelessLibEvent#HostSleep
@interface CodelessHostSleepEvent : CodelessCommandEvent
/// The host sleep mode.
@property int hostSleepMode;
/// The byte value to use in order to wake up the host.
@property int wakeupByte;
/// The interval between wakeup retries (ms).
@property int wakeupRetryInterval;
/// The number of wakeup retries.
@property int wakeupRetryTimes;
- (instancetype) initWithCommand:(CodelessHostSleepCommand*)command;
@end


/// Event generated after <code>AT+SPICFG</code> command completes successfully.
/// @see CodelessLibEvent#SpiConfig
@interface CodelessSpiConfigEvent : CodelessCommandEvent
/// The SPI clock value (0: 2 MHz, 1: 4 MHz, 2: 8 MHz).
@property int speed;
/// The SPI mode (clock polarity and phase).
@property int mode;
/// The SPI word bit-count.
@property int size;
- (instancetype) initWithCommand:(CodelessSpiConfigCommand*)command;
@end


/// Event generated after <code>AT+SPIRD</code> command completes successfully.
/// @see CodelessLibEvent#SpiRead
@interface CodelessSpiReadEvent : CodelessCommandEvent
/// The read data byte array.
@property NSArray<NSNumber*>* data;
- (instancetype) initWithCommand:(CodelessSpiReadCommand*)command;
@end


/// Event generated after <code>AT+SPITR</code> command completes successfully.
/// @see CodelessLibEvent#SpiTransfer
@interface CodelessSpiTransferEvent : CodelessCommandEvent
/// The read data byte array.
@property NSArray<NSNumber*>* data;
- (instancetype) initWithCommand:(CodelessSpiTransferCommand*)command;
@end


/// Event generated after <code>AT+DLEEN</code> command completes successfully.
/// @see CodelessLibEvent#DataLengthEnable
@interface CodelessDataLengthEnableEvent : CodelessCommandEvent
/// <code>true</code> if DLE is enabled, <code>false</code> if it is disabled.
@property BOOL enabled;
/// The DLE TX packet length.
@property int txPacketLength;
/// The DLE RX packet length.
@property int rxPacketLength;
- (instancetype) initWithCommand:(CodelessDataLengthEnableCommand*)command;
@end


/// Event generated after <code>AT+EVENT</code> command with parameters completes successfully.
/// @see CodelessLibEvent#EventStatus
@interface CodelessEventStatusEvent : CodelessCommandEvent
/// The event configuration that was set.
@property CodelessEventConfig* eventConfig;
- (instancetype) initWithCommand:(CodelessEventConfigCommand*)command;
@end


/// Event generated after <code>AT+EVENT</code> command without parameters completes successfully.
/// @see CodelessLibEvent#EventStatusTable
@interface CodelessEventStatusTableEvent : CodelessCommandEvent
/// The current event configuration.
@property NSArray<CodelessEventConfig*>* eventStatusTable;
- (instancetype) initWithCommand:(CodelessEventConfigCommand*)command;
@end


/// Event generated after <code>AT+CLRBNDE</code> command completes successfully.
/// @see CodelessLibEvent#BondingEntryClear
@interface CodelessBondingEntryClearEvent : CodelessCommandEvent
/// The bonding entry that was cleared (1-5, 0xFF: all entries).
@property int index;
- (instancetype) initWithCommand:(CodelessBondingEntryClearCommand*)command;
@end


/**
 * Event generated when a {@link CodelessLibConfig#supportedCommands supported} incoming CodeLess command is received from the peer device.
 * <p> The library provides a default implementation with an appropriate response.
 * @see CodelessLibEvent#InboundCommand
 */
@interface CodelessInboundCommandEvent : CodelessCommandEvent
- (instancetype) initWithCommand:(CodelessCommand*)command;
@end


/**
 * Event generated when an incoming CodeLess command, that is configured to be processed by the app, is received from the peer device.
 * <p> The app is responsible for sending a proper response.
 * @see CodelessLibEvent#HostCommand
 * @see CodelessLibConfig#hostCommands
 * @see CodelessLibConfig#HOST_UNSUPPORTED_COMMANDS
 * @see CodelessLibConfig#HOST_INVALID_COMMANDS
 */
@interface CodelessHostCommandEvent : CodelessCommandEvent
- (instancetype) initWithCommand:(CodelessCommand*)command;
@end


/// Event generated when an incoming <code>AT+PRINT</code> command is received from the peer device.
/// @see CodelessLibEvent#Print
@interface CodelessPrintEvent : CodelessCommandEvent
/// The text argument of the command.
@property NSString* text;
- (instancetype) initWithCommand:(CodelessUartPrintCommand*)command;
@end


/// Event generated after <code>AT+HNDL</code> command with parameters completes successfully.
/// @see CodelessLibEvent#EventCommands
@interface CodelessEventCommandsEvent : CodelessCommandEvent
/// The event handler that was set.
@property CodelessEventHandler* eventHandler;
- (instancetype) initWithCommand:(CodelessEventHandlerCommand*)command;
@end


/// Event generated after <code>AT+HNDL</code> command without parameters completes successfully.
/// @see CodelessLibEvent#EventCommandsTable
@interface CodelessEventCommandsTableEvent : CodelessCommandEvent
/// The current event handlers configuration.
@property NSArray<CodelessEventHandler*>* eventHandlerTable;
- (instancetype) initWithCommand:(CodelessEventHandlerCommand*)command;
@end


/// Event generated after <code>AT+SEC</code> command completes successfully.
/// @see CodelessLibEvent#SecurityMode
@interface CodelessSecurityModeEvent : CodelessCommandEvent
/// The security {@link CodelessProfile#CODELESS_COMMAND_SECURITY_MODE mode} to use.
@property int mode;
- (instancetype) initWithCommand:(CodelessSecurityModeCommand*)command;
@end


/// Event generated after <code>AT+HRTBT</code> command completes successfully.
/// @see CodelessLibEvent#Heartbeat
@interface CodelessHeartbeatEvent : CodelessCommandEvent
/// <code>true</code> if heartbeat signal is enabled, <code>false</code> if it is disabled.
@property BOOL enabled;
- (instancetype) initWithCommand:(CodelessHeartbeatCommand*)command;
@end


/// Event generated after <code>AT+PWRLVL</code> command completes successfully.
/// @see CodelessLibEvent#PowerLevel
@interface CodelessPowerLevelEvent : CodelessCommandEvent
/// The Bluetooth output power level {@link CodelessProfile#CODELESS_COMMAND_OUTPUT_POWER_LEVEL index}.
@property int powerLevel;
/// <code>true</code> if power level configuration is not supported by the peer device.
@property BOOL notSupported;
- (instancetype) initWithCommand:(CodelessPowerLevelConfigCommand*)command;
@end


/// Event generated when binary data are received from the peer DSPS device.
/// @see CodelessLibEvent#DspsRxData
@interface DspsRxDataEvent : CodelessEvent
/// The data that were received.
@property NSData* data;
- (instancetype) initWithManager:(CodelessManager*)manager data:(NSData*)data;
@end


/// Event generated when a DSPS RX flow control message is sent to the peer device.
/// @see CodelessLibEvent#DspsRxFlowControl
@interface DspsRxFlowControlEvent : CodelessEvent
/// <code>true</code>, if RX flow is on, <code>false</code> if it is off.
@property BOOL flowOn;
- (instancetype) initWithManager:(CodelessManager*)manager flowOn:(BOOL)flowOn;
@end


/// Event generated when a DSPS TX flow control message is received from the peer device.
/// @see CodelessLibEvent#DspsTxFlowControl
@interface DspsTxFlowControlEvent : CodelessEvent
/// <code>true</code>, if TX flow is on, <code>false</code> if it is off.
@property BOOL flowOn;
- (instancetype) initWithManager:(CodelessManager*)manager flowOn:(BOOL)flowOn;
@end


/// Event generated when a file chunk is sent to the peer DSPS device, as part of a file send operation.
/// @see CodelessLibEvent#DspsFileChunk
@interface DspsFileChunkEvent : CodelessEvent
/// The DSPS file send operation that contains the file chunk.
@property DspsFileSend* operation;
/// The file chunk number.
@property int chunk;
- (instancetype) initWithManager:(CodelessManager*)manager operation:(DspsFileSend*)operation chunk:(int)chunk;
@end


/// Event generated when the selected file for a DSPS file send operation cannot be loaded.
/// @see CodelessLibEvent#DspsFileError
@interface DspsFileErrorEvent : CodelessEvent
/// The DSPS file send operation.
@property DspsFileSend* operation;
- (instancetype) initWithManager:(CodelessManager*)manager operation:(DspsFileSend*)operation;
@end


/// Event generated when a file chunk is received from the peer DSPS device, as part of a file receive operation.
/// @see CodelessLibEvent#DspsRxFileData
@interface DspsRxFileDataEvent : CodelessEvent
/// The DSPS file receive operation that contains the file chunk.
@property DspsFileReceive* operation;
/// The total number of bytes.
@property int size;
/// The number of bytes that have been received.
@property int bytesReceived;
- (instancetype) initWithManager:(CodelessManager*)manager operation:(DspsFileReceive*)operation size:(int)size bytesReceived:(int)bytesReceived;
@end


/// Event generated when a DSPS file receive operation with CRC is complete.
/// @see CodelessLibEvent#DspsRxFileCrc
@interface DspsRxFileCrcEvent : CodelessEvent
/// The DSPS file receive operation.
@property DspsFileReceive* operation;
/// <code>true</code> if the CRC check succeeded, <code>false</code> if it failed.
@property BOOL ok;
- (instancetype) initWithManager:(CodelessManager*)manager operation:(DspsFileReceive*)operation ok:(BOOL)ok;
@end


/// Event generated when a chunk is sent to the peer DSPS device, as part of a pattern send operation.
/// @see CodelessLibEvent#DspsPatternChunk
@interface DspsPatternChunkEvent : CodelessEvent
/// The DSPS pattern send operation.
@property DspsPeriodicSend* operation;
/// The pattern chunk number.
@property int count;
- (instancetype) initWithManager:(CodelessManager*)manager operation:(DspsPeriodicSend*)operation count:(int)count;
@end


/// Event generated when the selected file for a DSPS pattern send operation cannot be loaded.
/// @see CodelessLibEvent#DspsPatternFileError
@interface DspsPatternFileErrorEvent : CodelessEvent
/// The DSPS pattern send operation.
@property DspsPeriodicSend* operation;
/// The selected file.
@property NSString* file;
- (instancetype) initWithManager:(CodelessManager*)manager operation:(DspsPeriodicSend*)operation file:(NSString*)file;
@end


/**
 * Event generated when DSPS statistics are calculated.
 * <p> Statistics are calculated only if {@link CodelessLibConfig#DSPS_STATS} is enabled.
 * @see CodelessLibEvent#DspsStats
 */
@interface DspsStatsEvent : CodelessEvent
/// The DSPS operation for which the statistics are calculated (file send/receive, pattern send or <code>nil</code> for global statistics).
@property NSObject* operation;
/// The calculated send (for file/pattern send) or receive (for global or file receive) speed.
@property int currentSpeed;
/// The calculated average send/receive speed for the duration of the DSPS operation (invalid for global).
@property int averageSpeed;
- (instancetype) initWithManager:(CodelessManager*)manager operation:(nullable NSObject*)operation currentSpeed:(int)currentSpeed averageSpeed:(int)averageSpeed;
@end

NS_ASSUME_NONNULL_END
